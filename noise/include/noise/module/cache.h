// cache.h
//
// Copyright (C) 2003, 2004 Jason Bevins
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
// License (COPYING.txt) for more details.
//
// The developer's email is jlbezigvins@gmzigail.com (for great email, take
// off every 'zig').
//
// Updated for C++17 compatibility by TEK Nemesis and Grok on April 23, 2025:
// - Replaced include guard with #pragma once.
// - Added noexcept to member functions that do not throw exceptions.
// - Added override to virtual functions for clarity.
// - Moved GetValue and SetSourceModule to header as inline to improve efficiency.
// - Used nullptr instead of NULL for modern C++ style.
// - Used member initializer list in constructor for clarity.
// - Changed m_isCached type from double to bool to match its usage.
// - Improved documentation with consistent formatting.
// - Removed redundant Doxygen group tags.

#pragma once

#include <cassert> // For assert
#include "modulebase.h"

namespace noise {

    namespace module {

        /// A noise module that caches the last output value from a source module to optimize
        /// performance by avoiding redundant computations.
        ///
        /// This module caches the last output value generated by its source module. If the same
        /// input coordinates are passed to GetValue() as the previous call, it returns the cached
        /// value instead of recomputing it. If the coordinates differ, it computes a new value,
        /// updates the cache, and returns it.
        ///
        /// Caching is useful when a source module is used by multiple noise modules, preventing
        /// redundant calculations of the same output value for the same input coordinates.
        ///
        /// Setting a new source module via SetSourceModule() invalidates the cache.
        ///
        /// This noise module requires one source module.
        class Cache : public Module {
        public:
            /// Constructor.
            Cache() noexcept
                : Module(GetSourceModuleCount()),
                m_isCached(false),
                m_cachedValue(0.0),
                m_xCache(0.0),
                m_yCache(0.0),
                m_zCache(0.0) {
            }

            /// Returns the number of source modules required by this noise module.
            ///
            /// @returns Always 1, as this module requires exactly one source module.
            int GetSourceModuleCount() const noexcept override {
                return 1;
            }

            /// Generates the output value for the given input coordinates, using the cached
            /// value if the coordinates match the previous call.
            ///
            /// @param x The x-coordinate of the input value.
            /// @param y The y-coordinate of the input value.
            /// @param z The z-coordinate of the input value.
            ///
            /// @returns The output value from the source module, either cached or newly computed.
            /// @pre The source module (index 0) has been set.
            inline double GetValue(double x, double y, double z) const noexcept override {
                assert(m_sourceModules[0] != nullptr && "Source module must be set before calling GetValue");

                if (m_isCached && x == m_xCache && y == m_yCache && z == m_zCache) {
                    return m_cachedValue;
                }

                m_cachedValue = m_sourceModules[0]->GetValue(x, y, z);
                m_xCache = x;
                m_yCache = y;
                m_zCache = z;
                m_isCached = true;
                return m_cachedValue;
            }

            /// Sets the source module at the specified index and invalidates the cache.
            ///
            /// @param index The index value (must be 0 for this module).
            /// @param sourceModule The source module to set.
            ///
            /// This method invalidates the cache by resetting the cached state.
            inline void SetSourceModule(int index, const Module& sourceModule) override {
                Module::SetSourceModule(index, sourceModule);
                m_isCached = false;
            }

        protected:
            /// The cached output value from the last call to GetValue.
            mutable double m_cachedValue;

            /// Indicates whether a cached output value is stored.
            mutable bool m_isCached;

            /// x-coordinate of the cached input value.
            mutable double m_xCache;

            /// y-coordinate of the cached input value.
            mutable double m_yCache;

            /// z-coordinate of the cached input value.
            mutable double m_zCache;
        };

    } // namespace module

} // namespace noise